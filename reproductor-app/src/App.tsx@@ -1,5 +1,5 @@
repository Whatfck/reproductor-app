import { useLibrary } from './useLibrary';
import { usePlaylist } from './usePlaylist'; 

// --- Lógica de la Aplicación ---

function App() {
  const {
    library,
    filteredLibrary,
    searchTerm,
    setSearchTerm,
    fileInputRef,
    handleFolderSelection,
    triggerFolderSelector,
  } = useLibrary();

  const {
    playlistSongs,
    currentSong,
    isPlaying,
    addToPlaylist,
    removeFromPlaylist,
    nextSong,
    prevSong,
    togglePlay,
    playFromLibrary,
  } = usePlaylist();

  // --- Renderizado ---

  return (
    <div className="flex flex-col min-h-screen bg-gray-950 font-sans">

      {/* Input oculto para seleccionar la carpeta */}
      {/* @ts-ignore */}
      <input type="file" webkitdirectory="" directory="" multiple ref={fileInputRef} onChange={handleFolderSelection} className="hidden"  />

      <header className="flex-shrink-0 w-full h-16 bg-gray-900 text-white shadow-lg flex items-center justify-between px-6 border-b border-gray-800 z-10">
        <h1 className="text-xl font-bold text-purple-400 w-1/4 flex-shrink-0">Reproductor-app</h1>
        <div className="relative w-1/2 flex justify-center">
          <input
            type="text"
            placeholder="Buscar en la Biblioteca..."
            className="bg-gray-800 text-white rounded-full px-4 py-2 w-full max-w-lg focus:ring-1 focus:ring-purple-500 focus:outline-none placeholder-gray-400"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <svg className="w-5 h-5 text-gray-400 absolute right-3 top-1/2 transform -translate-y-1/2 pointer-events-none" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </div>
        <div className="flex items-center gap-4 w-1/4 justify-end flex-shrink-0">
          <button onClick={triggerFolderSelector} title="Abrir carpeta de música" className="text-gray-400 hover:text-purple-400 transition-colors">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z" /></svg>
          </button>
          <button title="Configuración" className="text-gray-400 hover:text-purple-400 transition-colors">⚙️</button>
        </div>
      </header>

      <main className="flex-1 w-full flex overflow-hidden">
        <aside className="flex-shrink-0 w-[250px] bg-gray-900 text-white p-6 border-r border-gray-800 hidden md:flex flex-col">
          <div className="h-full w-full flex flex-col items-center justify-center text-center">
            <h3 className="text-lg font-bold text-purple-300 mb-4">🎵 Ahora Suena</h3>
            <div className="w-full max-w-[180px] aspect-square bg-gray-700 rounded-lg shadow-xl mb-4">
              <img src={`https://placehold.co/250x250/1e1b4b/9333ea?text=${currentSong?.album || '...'}`} alt="Carátula" className="w-full h-full object-cover rounded-lg" />
            </div>
            <div className="space-y-1 w-full max-w-[200px]">
              <p className="text-lg font-extrabold text-white break-words truncate" title={currentSong?.title}>{currentSong?.title || 'Selecciona una canción'}</p>
              <p className="text-sm text-gray-400">{currentSong?.artist || '...'}</p>
              <p className="text-xs text-purple-400">{currentSong ? `${currentSong.album} - ${currentSong.year}` : '...'}</p>
            </div>
          </div>
        </aside>

        <section className="flex-1 bg-gray-800 text-white p-4 sm:p-8 overflow-y-auto">
          <div className="bg-gray-900 rounded-lg shadow-xl overflow-hidden h-full flex flex-col">
            <div className="grid grid-cols-[30px_2fr_1.5fr_1.5fr_60px_60px_40px] gap-4 p-4 text-xs font-semibold uppercase text-gray-400 border-b border-gray-700 sticky top-0 bg-gray-900 z-10">
              <div className="text-center">#</div>
              <div>Título</div>
              <div className="hidden sm:block">Artista</div>
              <div className="hidden md:block">Álbum</div>
              <div className="text-center hidden lg:block">Año</div>
              <div className="text-right">Duración</div>
              <div></div>
            </div>
            <div className="divide-y divide-gray-800 text-sm overflow-y-auto">
              {filteredLibrary.length > 0 ? filteredLibrary.map((song, index) => (
                <div
                  key={song.id}
                  onDoubleClick={() => playFromLibrary(filteredLibrary, song)}
                  className={`grid grid-cols-[30px_2fr_1.5fr_1.5fr_60px_60px_40px] gap-4 p-3 sm:p-4 text-gray-300 cursor-pointer transition-colors ${currentSong?.id === song.id ? 'bg-purple-900/40 text-purple-400 font-semibold' : 'hover:bg-gray-700'}`}
                >
                  <div className="text-center">{currentSong?.id === song.id && isPlaying ? '▶️' : index + 1}</div>
                  <div className="truncate">{song.title}</div>
                  <div className="truncate hidden sm:block">{song.artist}</div>
                  <div className="truncate hidden md:block">{song.album}</div>
                  <div className="text-center hidden lg:block">{song.year}</div>
                  <div className="text-right">{song.duration}</div>
                  <button onClick={() => addToPlaylist(song)} className="text-center text-lg text-white hover:text-purple-300 transition-colors" title="Añadir a la playlist">+</button>
                </div>
              )) : (
                <div className="p-8 text-center text-gray-500">
                  {library.length === 0 ? "Usa el icono de carpeta 📂 para cargar tu música." : "No se encontraron resultados."}
                </div>
              )}
            </div>
          </div>
        </section>

        <aside className="flex-shrink-0 w-[280px] bg-gray-900 text-white p-6 border-l border-gray-800 flex flex-col hidden sm:flex">
          <div className="flex justify-between items-center mb-4 flex-shrink-0">
            <h3 className="text-xl font-bold text-white">Mi Playlist ({playlistSongs.length})</h3>
            <div className="flex space-x-2 text-purple-400">
              <button title="Guardar Playlist" className="hover:text-white transition-colors">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2"><path strokeLinecap="round" strokeLinejoin="round" d="M8 7H5a2 2 0 00-2 2v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4" /></svg>
              </button>
            </div>
          </div>
          <div className="flex-1 overflow-y-auto w-full divide-y divide-gray-800 text-sm">
            {playlistSongs.length > 0 ? playlistSongs.map((song) => (
              <div key={`playlist-${song.id}`} className={`flex items-center justify-between p-2 cursor-pointer transition-colors ${currentSong?.id === song.id ? 'bg-purple-800/50 text-purple-400 font-medium' : 'text-gray-300 hover:bg-gray-700'}`}>
                <span className="truncate">
                  {currentSong?.id === song.id ? '🎵 ' : ''}{song.title}
                </span>
                <button onClick={() => removeFromPlaylist(song.id)} title="Quitar de la Playlist" className="text-xl text-gray-500 hover:text-red-400 transition-colors ml-2">
                  -
                </button>
              </div>
            )) : (
              <div className="p-4 text-center text-xs text-gray-500 mt-4">
                Añade canciones desde la biblioteca.
              </div>
            )}
          </div>
        </aside>
      </main>

      <footer className="flex-shrink-0 w-full h-24 bg-gray-900 shadow-2xl flex items-center justify-between px-4 sm:px-6 border-t border-purple-900 z-10">
        <div className="text-white w-full flex flex-col sm:flex-row items-center justify-between">
          <div className="sm:w-1/3 flex items-center justify-start gap-3 w-full sm:order-1 order-3 mt-2 sm:mt-0">
            {/* Info de la canción en el footer */}
          </div>

          <div className="sm:w-1/3 flex items-center justify-center gap-4 sm:gap-6 w-full sm:order-2 order-1">
            <button className="text-xl text-gray-400 hover:text-purple-400 transition-colors" title="Aleatorio">🔀</button>
            <button onClick={prevSong} disabled={playlistSongs.length === 0} className="text-3xl text-gray-400 hover:text-purple-400 transition-colors disabled:text-gray-600 disabled:cursor-not-allowed" title="Anterior">⏮️</button>
            <button onClick={togglePlay} disabled={playlistSongs.length === 0} className="bg-purple-600 rounded-full p-3 text-2xl hover:bg-purple-700 transition-colors disabled:bg-gray-700 disabled:cursor-not-allowed" title={isPlaying ? 'Pausar' : 'Reproducir'}>
              {isPlaying ? '⏸️' : '▶️'}
            </button>
            <button onClick={nextSong} disabled={playlistSongs.length === 0} className="text-3xl text-gray-400 hover:text-purple-400 transition-colors disabled:text-gray-600 disabled:cursor-not-allowed" title="Siguiente">⏭️</button>
            <button className="text-xl text-gray-400 hover:text-purple-400 transition-colors" title="Repetir">🔁</button>
          </div>

          <div className="sm:w-1/3 flex items-center justify-end gap-6 w-full sm:order-3 order-2 mt-2 sm:mt-0">
            <div className="flex items-center gap-3 w-full">
              <span className="text-xs text-gray-400">0:00</span>
              <div className="flex-1 h-1.5 bg-gray-700 rounded-full">
                <div className="h-full bg-purple-500 rounded-full" style={{ width: '0%' }}></div>
              </div>
              <span className="text-xs text-gray-400">{currentSong?.duration || '0:00'}</span>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
}

export default App;
